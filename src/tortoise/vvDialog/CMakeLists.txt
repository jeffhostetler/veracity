# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Copyright 2010-2013 SourceGear, LLC
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# set the application's name
set(APP_NAME vvDialog)

# vv-thirdparty directories
set(VVTHIRDPARTY_BIN "${VVTHIRDPARTY}/bin")
set(VVTHIRDPARTY_INCLUDE "${VVTHIRDPARTY}/include")
set(VVTHIRDPARTY_LIB "${VVTHIRDPARTY}/lib")

# add the lib dir in vv-thirdparty to the lib path
link_directories(${VVTHIRDPARTY_LIB})

# set the CPP flags to match the C flags
set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} /EHsc")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" )
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")

# basic file lists
file(GLOB SOURCES *.cpp)
file(GLOB HEADERS *.h)
file(GLOB WX_RESOURCES *.xrc)
file(GLOB WIN_RESOURCES *.rc *.rc2)
file(GLOB GRAPHICS *.ico *.png)

# XRC resources
set(WX_RESOURCE_INC wxResources.inc) # CPP file generated by WXRC from WX_RESOURCES
set(WX_RESOURCE_CPP wxResources.cpp) # CPP file that includes PC_HEADER and WX_RESOURCE_INC
set(WX_RESOURCE_INC_PATH "${CMAKE_CURRENT_BINARY_DIR}/${WX_RESOURCE_INC}")
set(WX_RESOURCE_CPP_PATH "${CMAKE_CURRENT_BINARY_DIR}/${WX_RESOURCE_CPP}")
set(SOURCES ${SOURCES} ${WX_RESOURCE_INC_PATH}) # add these to the sources so that 
set(SOURCES ${SOURCES} ${WX_RESOURCE_CPP_PATH}) # they're easy to open from Visual Studio

# precompiled header files
set(PC_NAME precompiled)
set(PC_HEADER ${PC_NAME}.h)
set(PC_SOURCE ${PC_NAME}.cpp)
file(GLOB PC_HEADER_PATH ${PC_HEADER})
file(GLOB PC_SOURCE_PATH ${PC_SOURCE})

# groups of source files, for easy navigation in Visual Studio
source_group("Intermediates" FILES ${WX_RESOURCE_INC_PATH} ${WX_RESOURCE_CPP_PATH})
source_group("Graphics" FILES ${GRAPHICS})
file(GLOB GROUP_APPLICATION
	${PC_NAME}.*
	vvApplication.*
	vvCommand.*
	vvDialog.*
	vvProgressExecutor.*
	winResources.rc
)
source_group("Application" FILES ${GROUP_APPLICATION})
file(GLOB GROUP_SGLIB
	vvContext.*
	vvSgHelpers.*
	vvSgLogHandler.*
	vvSgWxLogHandler.*
	vvProgressDialog.*
	vvProgressStream.*
	vvRepoLocator.*
	vvRevSpec.*
	vvSglibStringPool.*
	vvVerbs.*
)
source_group("SgLib" FILES ${GROUP_SGLIB})
file(GLOB GROUP_WXWIDGETS
	vvDataViewToggleIconTextRenderer.*
	vvResourceArtProvider.*
	vv_wxListViewComboPopup.*
	vvWxHelpers.*
	vvListBoxComboPopup.*
	vvCheckListBoxComboPopup.*
)
source_group("wxWidgets" FILES ${GROUP_WXWIDGETS})
file(GLOB GROUP_UTILITIES
	vvCppUtilities.*
	vvFlags.*
	vvNullable.*
	vvCacheMessaging.*
)
source_group("Utilities" FILES ${GROUP_UTILITIES})
file(GLOB GROUP_VALIDATION
	vvValidator*
)
source_group("Validation" FILES ${GROUP_VALIDATION})
file(GLOB GROUP_CONTROLS
	vvDialogHeaderControl.*
	vvStampsControl.*
	vvStatusControl.*
	vvAuditDetailsControl.*
	vvRevisionLinkControl.*
	vvSyncTargetsControl.*
	vvTextLinkControl.*
	vvTextControl.*
	vvCurrentUserControl.*
	vvSelectableStaticText.*
	vvWorkItemsControl.*
)
source_group("Controls" FILES ${GROUP_CONTROLS})
file(GLOB GROUP_HISTORY_CONTROLS
	vvHistoryOptionsControl.*
	vvHistoryListControl.*
	vvHistoryTabbedControl.*
)
source_group("Controls/History" FILES ${GROUP_HISTORY_CONTROLS})

file(GLOB GROUP_COMMANDS_CREATE
	vvCreateCommand.*
	vvCreateDialog.*
)
source_group("Commands/create" FILES ${GROUP_COMMANDS_CREATE})
file(GLOB GROUP_COMMANDS_STATUS
	vvStatusCommand.*
	vvStatusDialog.*
)
source_group("Commands/status" FILES ${GROUP_COMMANDS_STATUS})
file(GLOB GROUP_COMMANDS_RENAME
	vvRenameCommand.*
	vvRenameDialog.*
)
source_group("Commands/rename" FILES ${GROUP_COMMANDS_RENAME})
file(GLOB GROUP_COMMANDS_COMMIT
	vvCommitCommand.*
	vvCommitDialog.*
)
source_group("Commands/commit" FILES ${GROUP_COMMANDS_COMMIT})

file(GLOB GROUP_COMMANDS_LOCK
	vvLockCommand.*
	vvLockDialog.*
)
source_group("Commands/lock" FILES ${GROUP_COMMANDS_LOCK})

file(GLOB GROUP_COMMANDS_MOVE
	vvMoveCommand.*
	vvMoveDialog.*
)
source_group("Commands/move" FILES ${GROUP_COMMANDS_MOVE})

file(GLOB GROUP_COMMANDS_UPDATE
	vvUpdateCommand.*
)
source_group("Commands/update" FILES ${GROUP_COMMANDS_UPDATE})

file(GLOB GROUP_COMMANDS_ADD
	vvAddCommand.*
	vvAddDialog.*
)
source_group("Commands/add" FILES ${GROUP_COMMANDS_ADD})
file(GLOB GROUP_COMMANDS_SYNC
	vvSyncCommand.*
	vvSyncDialog.*
)
source_group("Commands/sync" FILES ${GROUP_COMMANDS_SYNC})

file(GLOB GROUP_COMMANDS_INOUT
	vvInOutCommand.*
)
source_group("Commands/inout" FILES ${GROUP_COMMANDS_INOUT})

file(GLOB GROUP_COMMANDS_REMOVE
	vvRemoveCommand.*
	vvRemoveDialog.*
)
source_group("Commands/remove" FILES ${GROUP_COMMANDS_REMOVE})

file(GLOB GROUP_COMMANDS_REVERT
	vvRevertCommand.*
	vvRevertDialog.*
)
source_group("Commands/revert" FILES ${GROUP_COMMANDS_REVERT})

file(GLOB GROUP_COMMANDS_DIFF
	vvDiffCommand.*
	vvDiffThread.*
)
source_group("Commands/diff" FILES ${GROUP_COMMANDS_DIFF})

file(GLOB GROUP_COMMANDS_HISTORY
	vvHistoryCommand.*
	vvHistoryObjects.*
	vvHistoryDialog.*
)
source_group("Commands/history" FILES ${GROUP_COMMANDS_HISTORY})

file(GLOB GROUP_COMMANDS_REVDETAILS
	vvRevDetailsCommand.*
	vvRevDetailsDialog.*
)
source_group("Commands/revdetails" FILES ${GROUP_COMMANDS_REVDETAILS})

file(GLOB GROUP_COMMANDS_MERGE
	vvMergeCommand.*
)
source_group("Commands/merge" FILES ${GROUP_COMMANDS_MERGE})

file(GLOB GROUP_COMMANDS_RESOLVE
	vvResolveCommand.*
	vvResolveDialog.*
)
source_group("Commands/resolve" FILES ${GROUP_COMMANDS_RESOLVE})

file(GLOB GROUP_COMMANDS_SERVE
	vvServeCommand.*
	vvServeDialog.*
)
source_group("Commands/serve" FILES ${GROUP_COMMANDS_SERVE})

file(GLOB GROUP_COMMANDS_SETTINGS
	vvSettingsCommand.*
	vvSettingsDialog.*
)
source_group("Commands/settings" FILES ${GROUP_COMMANDS_SETTINGS})

# add groups for new commands here


file(GLOB GROUP_DIALOGS_REPOBROWSER
	vvRepoBrowserDialog.*
	vvRepoBrowserControl.*
)
source_group("Dialogs/repobrowser" FILES ${GROUP_DIALOGS_REPOBROWSER})

file(GLOB GROUP_DIALOGS_LOGIN
	vvLoginDialog.*
)
source_group("Dialogs/login" FILES ${GROUP_DIALOGS_LOGIN})


file(GLOB GROUP_DIALOGS_REVISIONCHOICE
	vvRevisionChoiceDialog.*
)
source_group("Dialogs/revisionchoice" FILES ${GROUP_DIALOGS_REVISIONCHOICE})

file(GLOB GROUP_DIALOGS_REVISION_SELECTION
	vvRevisionSelectionDialog.*
)
source_group("Dialogs/RevisionSelection" FILES ${GROUP_DIALOGS_REVISION_SELECTION})

file(GLOB GROUP_DIALOGS_REVSPEC
	vvRevSpecControl.*
	vvRevSpecDialog.*
)
source_group("Dialogs/RevSpec" FILES ${GROUP_DIALOGS_REVSPEC})

file(GLOB GROUP_DIALOGS_REVERTSINGLE
	vvRevertSingleDialog.*
	vvRevertSingleDialog.*
)
source_group("Dialogs/RevertSingle" FILES ${GROUP_DIALOGS_REVERTSINGLE})


file(GLOB GROUP_COMMANDS_UPGRADE
	vvUpgradeCommand.*
	vvUpgradeConfirmationDialog.*
)
source_group("Commands/upgrade" FILES ${GROUP_COMMANDS_UPGRADE})

file(GLOB GROUP_CONTROLS_BRANCH
	vvBranchControl.*
	vvBranchSelectDialog.*
)
source_group("Controls/branch" FILES ${GROUP_CONTROLS_BRANCH})

file(GLOB GROUP_COMMANDS_ABOUT
	vvAboutCommand.*
	vvAboutDialog.*
)
source_group("Commands/about" FILES ${GROUP_COMMANDS_ABOUT})

# WXRC resource compiler
set(WXRC_EXE wxrc.exe)
set(WXRC_EXE_PATH "${VVTHIRDPARTY_BIN}/${WXRC_EXE}")
if(NOT EXISTS "${WXRC_EXE_PATH}")
	MESSAGE(FATAL_ERROR "Cannot find '${WXRC_EXE}' in vv-thirdparty bin directory at: ${WXRC_EXE_PATH}")
endif()

# external libs that we need to link to
set(EXTERNAL_LIBS
	# system  libs
	comctl32.lib

	# SG libs
	sglib
	sg_fs3
	sgmongoose
	
	# wxWidgets debug libs
	debug ${VVTHIRDPARTY}/lib/wxbase29ud.lib
	debug ${VVTHIRDPARTY}/lib/wxbase29ud_net.lib
	debug ${VVTHIRDPARTY}/lib/wxbase29ud_xml.lib
	debug ${VVTHIRDPARTY}/lib/wxexpatd.lib
	debug ${VVTHIRDPARTY}/lib/wxjpegd.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_adv.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_aui.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_core.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_gl.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_html.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_media.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_propgrid.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_qa.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_ribbon.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_richtext.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_stc.lib
	debug ${VVTHIRDPARTY}/lib/wxmsw29ud_xrc.lib
	debug ${VVTHIRDPARTY}/lib/wxpngd.lib
	debug ${VVTHIRDPARTY}/lib/wxregexud.lib
	debug ${VVTHIRDPARTY}/lib/wxscintillad.lib
	debug ${VVTHIRDPARTY}/lib/wxtiffd.lib
	debug ${VVTHIRDPARTY}/lib/wxzlibd.lib
	
	
	# wxWidgets release libs
	optimized ${VVTHIRDPARTY}/lib/wxbase29u.lib
	optimized ${VVTHIRDPARTY}/lib/wxbase29u_net.lib
	optimized ${VVTHIRDPARTY}/lib/wxbase29u_xml.lib
	optimized ${VVTHIRDPARTY}/lib/wxexpat.lib
	optimized ${VVTHIRDPARTY}/lib/wxjpeg.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_adv.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_aui.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_core.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_gl.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_html.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_media.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_propgrid.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_qa.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_ribbon.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_richtext.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_stc.lib
	optimized ${VVTHIRDPARTY}/lib/wxmsw29u_xrc.lib
	optimized ${VVTHIRDPARTY}/lib/wxpng.lib
	optimized ${VVTHIRDPARTY}/lib/wxregexu.lib
	optimized ${VVTHIRDPARTY}/lib/wxscintilla.lib
	optimized ${VVTHIRDPARTY}/lib/wxtiff.lib
	optimized ${VVTHIRDPARTY}/lib/wxzlib.lib
)

# custom command for building CPP code from XRC resources using WXRC
# the output is just a C++ file, but it can't be compiled by itself (so I'm using a .inc extension)
# because we're using a custom pre-compiled header that we need to include above it
# so the second custom command below makes a buildable C++ file
# which just includes the precompiled header and then the generated resource C++
add_custom_command(
	OUTPUT ${WX_RESOURCE_INC_PATH}
	DEPENDS ${WX_RESOURCES}
	COMMAND ${WXRC_EXE_PATH} /c /o "${WX_RESOURCE_INC_PATH}" ${WX_RESOURCES}
	)
add_custom_command(
	OUTPUT ${WX_RESOURCE_CPP_PATH}
	DEPENDS ${WX_RESOURCE_INC_PATH}
	COMMAND echo // This file was automatically generated by a custom cmake command.  Do not edit by hand.> ${WX_RESOURCE_CPP_PATH}
	COMMAND echo \#include \"${PC_HEADER}\">> ${WX_RESOURCE_CPP_PATH}
	COMMAND echo \#include \"${WX_RESOURCE_INC_PATH}\">> ${WX_RESOURCE_CPP_PATH}
	)

# add the app's executable
add_executable(${APP_NAME} WIN32 ${SOURCES} ${HEADERS} ${WX_RESOURCES} ${WIN_RESOURCES} ${GRAPHICS})
set_target_properties(${APP_NAME} PROPERTIES FOLDER "Windows/Tortoise")

# set the linker to use C++
set_target_properties(${APP_NAME} PROPERTIES LINKER_LANGUAGE CXX)

# set the project to use our precompiled header
set_target_properties(${APP_NAME} PROPERTIES COMPILE_FLAGS "/Yu${PC_HEADER}")

# override the precompiled header's CPP to generate the header, rather than trying to use it
set_source_files_properties(${PC_SOURCE} PROPERTIES COMPILE_FLAGS "/Yc${PC_HEADER}")

# link with our external libs
target_link_libraries(${APP_NAME} ${EXTERNAL_LIBS})
